AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: An AWS Serverless Application Model template describing your function.

Parameters:
  CognitoUserPoolArn:
    Type: String
  BedrockAgentAliasId:
    Type: String
  BedrockAgentId:
    Type: String
  KmsKeyId: 
    Type: String  

Resources:

  ApiGwAccountConfig:
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn: !GetAtt "ApiGatewayLoggingRole.Arn"

  ApiGatewayLoggingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

  AccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      KmsKeyId: !Ref KmsKeyId

  ClaimsAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: claim-app-agent-demo-api
      Body:
        swagger: "2.0"
        info:
          version: "1.0"
          title: "claim-app-agent-demo-api"
        schemes:
        - "https"
        paths:
          /claims:
            options:
              consumes:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
            x-amazon-apigateway-any-method:
              produces:
              - "application/json"
              responses: {}
              security:
              - CognitoAuthorizer: []
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${claimsinvokebedrockagents.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
        securityDefinitions:
          CognitoAuthorizer:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "cognito_user_pools"
            x-amazon-apigateway-authorizer:
              providerARNs:
              - !Ref CognitoUserPoolArn
              type: "COGNITO_USER_POOLS"

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ClaimsAPI
    DependsOn: 
      - ClaimsAPI
      - claimsinvokebedrockagents

  ProdStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref ClaimsAPI
      StageName: Prod
      DeploymentId: !Ref ApiDeployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: "*"
          LoggingLevel: INFO
          ResourcePath: "/*"
          MetricsEnabled: true
      AccessLogSetting:
        DestinationArn: !GetAtt AccessLogs.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "integrationStatus": $context.integrationStatus, "integrationLatency": $context.integrationLatency, "responseLength":"$context.responseLength" }'
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-API"
        - Key: Stack
          Value: !Sub "${AWS::StackName}"      

  InvokeFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/claimsinvokebedrockagents"
      RetentionInDays: 7
      KmsKeyId: !Ref KmsKeyId      

  claimsinvokebedrockagents:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./invoke-lambda
      Description: ''
      MemorySize: 128
      Timeout: 180
      Handler: invoke_lambda.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 512
      Environment:
        Variables:
          AGENT_ALIAS_ID: !Ref BedrockAgentAliasId
          AGENT_ID: !Ref BedrockAgentId
      PackageType: Zip
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeAgent
              Resource:  !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/${BedrockAgentId}/alias/${BedrockAgentAliasId}'
      SnapStart:
        ApplyOn: None
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /claims
            Method: ANY
            RestApiId:
              Ref: ClaimsAPI
            Auth:
              Authorizer: CognitoUserPoolAuthorizer
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto

Outputs:
  APIEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ClaimsAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod"

  APIID:
    Description: "API Gateway ID"
    Value: !Ref ClaimsAPI
